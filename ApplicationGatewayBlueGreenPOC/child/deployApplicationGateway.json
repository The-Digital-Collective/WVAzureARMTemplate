{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "sampleappgatewayanbVNet",
      "metadata": {
        "description": "virtual network name"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "virtual network address range"
      }
    },
    "subnetName1": {
      "type": "string",
      "defaultValue": "Frontend",
      "metadata": {
        "description": "Subnet Name"
      }
    },
    "subnetName2": {
      "type": "string",
      "defaultValue": "Backend",
      "metadata": {
        "description": "Subnet Name"
      }
    },
    "subnetPrefix1": {
      "type": "string",
      "defaultValue": "10.1.0.0/24",
      "metadata": {
        "description": "Subnet prefix"
      }
    },
    "subnetPrefix2": {
      "type": "string",
      "defaultValue": "10.1.1.0/24",
      "metadata": {
        "description": "Subnet prefix"
      }
    },
    "applicationGatewayName": {
      "type": "string",
      "defaultValue": "sampleappgatewayanb1",
      "metadata": {
        "description": "application gateway name"
      }
    },
    "frontendHTTPPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "application gateway front end port"
      }
    },
    "frontendHTTPSPort": {
      "type": "int",
      "defaultValue": 443,
      "metadata": {
        "description": "application gateway front end port"
      }
    },
    "backendPort": {
      "type": "int",
      "defaultValue": 443,
      "metadata": {
        "description": "application gateway back end port"
      }
    },
    "cookieBasedAffinity": {
      "type": "string",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "defaultValue": "Enabled",
      "metadata": {
        "description": "cookie based affinity"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "publicIPAddresses_public_name": {
        "defaultValue": "public",
        "type": "String"
    },
    "frontendCertData": {
      "type": "string",
      "metadata": {
        "description": "Base-64 encoded form of the .pfx file. This is the cert terminating on the Application Gateway."
      }
    },
    "frontendCertPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for .pfx certificate"
      }
    },
	"outputAppServiceReference": {
		"type": "string"
	}
  },
  "variables": {
    "affinityCookieName":"app-cookie",
    "affinityCookieTimeOut":60,
    "connectionDraining":true,
    "connectionDrainingTimeOut":60
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName1')]",
            "properties": {
               "addressPrefix": "[parameters('subnetPrefix1')]",
               "delegations": [],
               "privateEndpointNetworkPolicies": "Enabled",
               "privateLinkServiceNetworkPolicies": "Enabled"
            }
          },
          {
            "name": "[parameters('subnetName2')]",
            "properties": {
               "addressPrefix": "[parameters('subnetPrefix2')]",
               "delegations": [],
               "privateEndpointNetworkPolicies": "Enabled",
               "privateLinkServiceNetworkPolicies": "Enabled"
             }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
       "type": "Microsoft.Network/virtualNetworks/subnets",
       "apiVersion": "2019-11-01",
       "name": "[concat(parameters('virtualNetworkName'), '/',parameters('subnetName2'))]",
       "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
       ],
       "properties": {
           "addressPrefix": "[parameters('subnetPrefix2')]",
           "delegations": [],
           "privateEndpointNetworkPolicies": "Enabled",
           "privateLinkServiceNetworkPolicies": "Enabled"
       }
     },
     {
       "type": "Microsoft.Network/virtualNetworks/subnets",
       "apiVersion": "2019-11-01",
       "name": "[concat(parameters('virtualNetworkName'), '/',parameters('subnetName1'))]",
       "dependsOn": [
           "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
       ],
       "properties": {
           "addressPrefix": "[parameters('subnetPrefix1')]",
           "delegations": [],
           "privateEndpointNetworkPolicies": "Enabled",
           "privateLinkServiceNetworkPolicies": "Enabled"
       }
    },
    {
       "type": "Microsoft.Network/publicIPAddresses",
       "apiVersion": "2019-11-01",
       "name": "[parameters('publicIPAddresses_public_name')]",
       "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
       "properties": {
           		"ipAddress": "52.141.141.141",
                "publicIPAddressVersion": "IPv4",
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": 4,
                "ipTags": []
       }
    },
    {
      "apiVersion": "2019-11-01",
      "name": "[parameters('applicationGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', parameters('publicIPAddresses_public_name'))]"
      ],
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2"
        },
        "sslCertificates": [
          {
            "name": "appGatewayFrontEndSslCert",
            "properties": {
              "data": "[parameters('frontendCertData')]",
              "password": "[parameters('frontendCertPassword')]"
            }
          }
        ],
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName2'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
            "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', parameters('publicIPAddresses_public_name'))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendHTTPPort",
            "properties": {
              "Port": "[parameters('frontendHTTPPort')]"
            }
          },
          {
            "name": "appGatewayFrontendHTTPSPort",
            "properties": {
              "Port": "[parameters('frontendHTTPSPort')]"
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses":[
              		{
                       "fqdn": "[concat(parameters('outputAppServiceReference'),'.azurewebsites.net')]"
                    }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
	              "Port": "[parameters('backendPort')]",
	              "Protocol": "Https",
	              "CookieBasedAffinity": "[parameters('cookieBasedAffinity')]",
	              "connectionDraining": {
	              "enabled": "[variables('connectionDraining')]",
	              "drainTimeoutInSec": "[variables('connectionDrainingTimeOut')]"
	              },
	              "pickHostNameFromBackendAddress": true,
	              "affinityCookieName": "[variables('affinityCookieName')]",
	              "requestTimeout": "[variables('affinityCookieTimeOut')]"
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIpConfiguration": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/frontendPorts/appGatewayFrontendHTTPPort')]"
              },
              "Protocol": "Http",
              "hostNames": [],
              "requireServerNameIndication": false
            }
          },
          {
            "name": "appGatewayHttpsListener",
            "properties": {
              "FrontendIpConfiguration": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/frontendPorts/appGatewayFrontendHTTPSPort')]"
              },
              "Protocol": "Https",
              "sslCertificate": {
                      "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/sslCertificates/appGatewayFrontEndSslCert')]"
              }
            }
          }
        ],
        "requestRoutingRules": [
          {
             "name": "rule1",
             "properties": {
               "ruleType": "Basic",
               "httpListener": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/httpListeners/appGatewayHttpListener')]"
               },
             "redirectConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/redirectConfigurations/rule1')]"
               }
            }
          },
          {
            "Name": "rule2",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/httpListeners/appGatewayHttpsListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              }
            }
          }
        ],
        "probes": [],
        "redirectConfigurations": [
           {
               "name": "rule1",
               "properties": {
                    "redirectType": "Permanent",
                    "targetListener": {
                          "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/httpListeners/appGatewayHttpsListener')]"
                    },
                     "includePath": true,
                     "includeQueryString": true,
                     "requestRoutingRules": [
                          {
                            "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName')), '/requestRoutingRules/rule1')]"
                          }
                       ]
                     }
            }
        ],
         "enableHttp2": false,
         "autoscaleConfiguration": {
         "minCapacity": 0,
         "maxCapacity": 10
         }
      }
    }
  ]
}